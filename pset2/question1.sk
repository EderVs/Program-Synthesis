// Generator for the expressions given in the assignment.
generator int exp(int myi, int myj, int[2] goal) {
	int t = ??;

	if (t == 0) {
		return {| 0 | 1 | -1 |};
	}

	if (t == 1) {
		return {| myi | myj |};
	}

	if (t == 2) {
		return goal[??];
	}

	int left = exp(myi, myj, goal);
	int right = exp(myi, myj, goal);

	if (t == 3) {
		return rect(left);
	}

	if (t == 4) {
		return left + right;
	}

	if (t == 5) {
		return left - right;
	}
}

// Given function in the assignment.
int rect(int x) {
	if (x > 0) {
		return 1;
	}
	if (x < 0) {
		return -1;
	}
	return 0;
}

// Generator for condassign given in the grammar.
generator void prog(int N, int[2][N] obstacles, ref int myi, ref int myj, int[2] goal) {
	int tmpi = myi + exp(myi, myj, goal);
	int tmpj = myj + exp(myi, myj, goal);

	if (hasObstacle(N, obstacles, tmpi, tmpj)) {
			myi = tmpi;
			myj = tmpj;
			return;
	}

	// Recursive call if the new coordinates are on an obstacle.
	prog(N, obstacles, myi, myj, goal);
}

// Checks that a given coordinate is not on a obstacle.
// Returns true if the coordinate is not on a obstacle.
// Otherwise, returns false.
bit hasObstacle(int N, int[2][N] obstacles, int myi, int myj) {
	for (int k = 0; k < N; k++) {
		int pos_i = obstacles[k][0];
		int pos_j = obstacles[k][1];
		if (pos_i == myi && pos_j == myj) {
			return true;
		}
	}
	return false;
}

// Function that will specify the boundaries for the coordinates. 
// These boundaries can be the distance from the old coordinate to the new coordinate.
// That the agent has indeed moved.
// The agent remains inside the grid.
void control([int N], ref int myi, ref int myj, int[2][N] obstacles, int[2] goal) {
	int old_myi = myi;
	int old_myj = myj;

	// Call for the generator.
	prog(N, obstacles, myi, myj, goal);

	// Checks that the new position is in the grid boundaries.
	int GRID_TAM = 8;
	assert myi < GRID_TAM;
	assert myj < GRID_TAM; 
	assert myi >= 0;
	assert myj >= 0;

	bit has_shifted = old_myi != myi || old_myj != myj;
	assert has_shifted == true;

	// Gets the difference of old coordinates vs. new coordinates.
	old_myi = old_myi > myi ? old_myi - myi : myi - old_myi;
	old_myj = old_myj > myj ? old_myj - myj : myj - old_myj;

	// Checks that the agent moves at most 1 position in each axis.
	assert old_myi <= 1;
	assert old_myj <= 1;
}

int manhattan_distance(int src_i, int src_j, int dest_i, int dest_j) {
	int pos_i = src_i > dest_i ? src_i - dest_i : dest_i - src_i;
	int pos_j = src_j > dest_j ? src_j - dest_j : dest_j - src_j;
	return pos_i + pos_j;
}

// Recursive function that calls control.
// The wrapper is for the counter bnd which will be decreasing until it's 0 (or less).
harness void control_wrapper([int N], ref int myi, ref int myj, int[2][N] obstacles, int[2] goal, int bnd) {
	if (bnd <= 0) {
		return;
	}

	// Calls the function that takes the steps for the agent.
	control(N, myi, myj, obstacles, goal);

	// If the agent is not in the goal yet, then it should move again iff bnd > 0.
	if (myi != goal[0] && myj != goal[1]) {
		control_wrapper(N, myi, myj, obstacles, goal, bnd - 1);
	}
}

// Main function where the parameters will be received.
void main(int N, int[2][N] obstacles, int[2] goal) {
	int GRID_TAM = 8;
	assume N < 8;
	assume N >= 0;

	// Initial position of the agent.
	int myi = 0;
	int myj = 0;

	assume goal[0] < GRID_TAM;
	assume goal[0] >= 0;
	assume goal[1] < GRID_TAM;
	assume goal[1] >= 0;

	for (int i = 0; i < N; i++) {
		int pos_i = obstacles[i][0];
		int pos_j = obstacles[i][1];

		// There's no obstacle at the initial position.
		assume pos_i != 0;
		assume pos_j != 0;

		// Each obstacle is inside the boundaries.
		assume pos_i < GRID_TAM;
		assume pos_i >= 0;
		assume pos_j < GRID_TAM;
		assume pos_j >= 0;

		// Manhattan Distance verification for every pair of obstacles before the current.
		for (int j = 0; j < i; j++) {
			int dest_i = obstacles[j][0];
			int dest_j = obstacles[j][1];
			int m_distance = manhattan_distance(pos_i, pos_j, dest_i, dest_j);
			assume m_distance > 3;
		}
	}

	// At most the agent has to take 24 moves.
	while (myi != goal[0] && myj != goal[1]) {
		int bnd = 24;
		// Calls the function where 24 is the maximum steps for the agent.
		control_wrapper(N, myi, myj, obstacles, goal, bnd);
	}

	assert myi == goal[0];
	assert myj == goal[1];
}
